---
- name: Get ASG instance IPs and update Docker containers
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    asg_name: anup-training-dev-asg
    region: us-east-1

  tasks:
    - name: Get ASG info
      amazon.aws.ec2_asg_info:
        region: "{{ region }}"
        name: "{{ asg_name }}"
      register: asg_info

    - name: Get instance IDs from ASG
      set_fact:
        instance_ids: "{{ asg_info.results[0].instances | map(attribute='instance_id') | list }}"
      when: asg_info.results is defined and asg_info.results|length > 0

    - name: Fallback - try different ASG structure
      set_fact:
        instance_ids: "{{ asg_info.auto_scaling_groups[0].instances | map(attribute='instance_id') | list }}"
      when: instance_ids is not defined and asg_info.auto_scaling_groups is defined

    - name: Debug instance IDs
      debug:
        var: instance_ids

    - name: Fail if no instances found
      fail:
        msg: "No instances found in ASG {{ asg_name }}"
      when: instance_ids is not defined or instance_ids|length == 0

    - name: Get instance info
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        instance_ids: "{{ instance_ids }}"
      register: ec2_info

    - name: Add instances to dynamic group
      add_host:
        name: "{{ item.instance_id }}"
        groups: asg_hosts
        ansible_host: "{{ item.network_interfaces[0].private_ip_address }}"
        instance_id: "{{ item.instance_id }}"
        private_ip: "{{ item.network_interfaces[0].private_ip_address }}"
      loop: "{{ ec2_info.instances }}"

- name: Update Docker containers on ASG instances
  hosts: asg_hosts
  gather_facts: no
  vars:
    ansible_connection: community.aws.aws_ssm
    ansible_aws_ssm_region: "{{ region | default('us-east-1') }}"
    ansible_aws_ssm_instance_id: "{{ instance_id }}"
    ansible_aws_ssm_plugin: /usr/local/bin/session-manager-plugin
  tasks:
    - name: Test SSM connectivity
      ping:
      register: ping_result
      ignore_errors: yes

    - name: Debug ping result
      debug:
        var: ping_result

    - name: Pull latest Docker image and restart app
      shell: |
        cd /app && docker-compose pull app && docker-compose up -d app
      register: docker_update_result
      when: ping_result is succeeded

    - name: Show Docker update result
      debug:
        var: docker_update_result
      when: docker_update_result is defined